
// This is an automatic generated file, please do not edit
//#ifdef nvmcc_comp_v1
// nvmcc does not need this file
//#else

;
;
;
;
;
;
signed long RoundDiv(signed long a, signed long b);
unsigned char rotl8(unsigned char value, signed long shift);
unsigned short rotl16(unsigned short value, signed long shift);
signed long rotl32(signed long value, signed long shift);
unsigned char rotr8(unsigned char value, signed long shift);
unsigned short rotr16(unsigned short value, signed long shift);
signed long rotr32(signed long value, signed long shift);
struct Pointer: object  {
    signed long ptr;
};
struct TBitPointer: object  {
    signed long ptr;
    signed char bitoffset;
};
struct bit: signed_char  {
    signed char super;
    bit ll_primitivebit;
};
struct ArrayBasicType: object  {
};
struct Array: object  {
    void data;
    ArrayBasicType geti(signed long n);
};
struct String: object  {
    unsigned char Len;
    unsigned short MaxItems;
    unsigned char Txt[200];
    signed long isEmpty();
    unsigned char geti(signed long n);
    void Clear();
    void set(String cSource);
    void sum_set(String cSource);
    String SubStr(signed long iStart, signed long iLength);
    void AddSubStr(String cSource, signed long iStart, signed long iLength);
    void AddFormatNum(signed long n, signed char lpad, signed char iDec, signed char sgn);
    void AddFormatNumHex(signed long iNum, signed char iDig);
    void AddFormatNumBase(signed long iNum, signed char iDig, signed char cPad, signed char iBase);
    void AddFormat(String format, signed long n);
    void Format(String format, signed long n);
    signed long ToIntEx(signed long iStart, signed long iBase);
    signed long ToInt();
    signed long Equal(String s2);
    signed long NotEqual(String s2);
    signed long IndexOfChar(unsigned char c);
};
signed char ToChar(signed char n);
unsigned char ToByte(unsigned char n);
unsigned short ToWord(unsigned short n);
signed short ToShort(signed short n);
signed long sub(signed long n);
void SetReference(void subj, void val);
void SysCall(signed long FnCode);
signed long GetSysParam(signed long iIndex);
signed long SetSysParam(signed long iIndex, signed long iValue);
void CANsetNodeID(signed short iNodeID);
signed short CANgetNodeID();
signed long CANgetSpeed();
signed short CANgetUITarget();
void CANsetUITarget(signed long iDevice);
void MMIConnectToDevice(signed long iDevice);
signed long GetUILanguage();
void SetUILanguage(signed long iLang);
void OutputDebugString(String cMsg);
void OutputDebugNum(String cMsg, signed long iNum);
void SetWatchdog(unsigned short iTimeout);
void Reboot(signed char iRebootMode);
;
;
;
signed long min(signed long nV1, signed long nV2);
signed long max(signed long nV1, signed long nV2);
signed long abs(signed long nVal);
signed long between(signed long nVal, signed long nMin, signed long nMax);
signed long strcmp(String a, String b);
signed long strncmp(String a, String b, signed long len);
unsigned short CRC16(void a, signed long iSize, unsigned short StartCRC);
struct TSysDeviceInfo  {
    unsigned char StructVersion;
    signed long ProductCode;
    signed long SerialNumber;
    unsigned short CustomProdutCode;
    signed long BiosDate;
    unsigned char BiosVersion;
    unsigned short VendorID;
    unsigned short AppID;
    signed long AppDate;
    unsigned short AppMaxSize;
    unsigned short AppMaxStore;
    unsigned short AppMaxE2P_KB;
    unsigned short AppRamSize;
    unsigned char ioNumDI;
    unsigned char ioNumAI;
    unsigned char ioNumDO;
    unsigned char ioNumAO;
    unsigned char ioNumPWM;
    signed long AppMaxE2P();
    void GetInfo();
    unsigned short GetBiosVer();
    signed long isMCX08();
    signed long isMCX06();
    signed long isMMIGRS();
    void GetDeviceFamilyDescr(String Descr);
};
struct TSysDeviceInfo_v2  {
    unsigned char StructVersion;
    signed long ProductCode;
    signed long SerialNumber;
    unsigned short CustomProdutCode;
    signed long BiosDate;
    unsigned char BiosVersion;
    unsigned short VendorID;
    unsigned short AppID;
    signed long AppDate;
    unsigned short BiosVer;
    unsigned short BiosCode;
    signed long AppMaxSize;
    signed long AppMaxStore;
    signed long AppMaxE2P;
    signed long AppRamSize;
    signed long UploadAreaSize;
    unsigned short SupportedFunctions;
    unsigned char ioNumDI;
    unsigned char ioNumAI;
    unsigned char ioNumDO;
    unsigned char ioNumAO;
    void GetInfo();
    unsigned short GetBiosVer();
    signed long isMCX08();
    signed long isMCX06();
    signed long isMMIGRS();
    signed long isMMIMYK();
    signed long BiosSCode();
    void GetDeviceFamilyDescr(String Descr);
    signed long SupportFloat();
    signed long SupportMultitask();
};
struct TTimerSec: object  {
    signed long Sec;
    void set(TTimerSec b);
    void Start();
    void Clear();
    signed long isClear();
    signed long ElapsedSec();
    void SetTime(signed long iSec);
    signed long GetTime();
    void AddSec(signed long iSec);
    void Addms(signed long iMilliseconds);
    void EarlyStart(signed long iOffset);
};
struct TStoppableTimerSec: TTimerSec  {
    TTimerSec super;
    signed long ElapsedSec();
    signed long isPaused();
    void Pause();
    void Resume();
};
struct TTimer: TTimerSec  {
    TTimerSec super;
    unsigned short MilliSec;
    void set(TTimer b);
    TTimer sub(TTimer time2);
    void sub_set(TTimer time2);
    void Start();
    void Clear();
    signed long isClear();
    signed long CheckAndRestartTimer(signed long iCheck);
    signed long Elapsedms();
    signed long GetElapsedmsAndRestart();
    void Addms(signed long iMilliseconds);
    void EarlyStart(signed long iOffset);
};
struct TReverseTimer: TTimer  {
    TTimer super;
    void ReverseCountms(signed long iCountms);
    signed long Remainingms();
};
struct TSysInfo: object  {
    unsigned char SysInfoVersion;
    unsigned char LastVMError;
    signed long LastVMErrorPC;
    TTimer SysTime;
    signed long SysMaxLoopTime;
    signed long MaxStackSize;
    bit PersistentMemChanged;
    bit DisableDownload;
    void GetInfo();
    void SetInfo();
};
void Sleep(signed long iMillisec);
void Suspend(signed long iMillisec, signed long WakeUpEvents);
TSysInfo Sys;
struct TComEvent: signed_long  {
    signed long super;
};
struct TComQueue  {
    unsigned char QueueHandle;
    unsigned short ObjectSize;
    unsigned short MaxBuffSize;
    signed long BufferPtr;
    unsigned char geti(signed long n);
    signed long Len();
    signed long MaxLen();
};
struct TCom: object  {
    unsigned char ComPort;
    unsigned short BytesTx;
    unsigned short BytesRx;
    unsigned short Errors;
    unsigned short OverrunErrors;
    TComQueue dummy_RxQueue;
    TComQueue dummy_TxQueue;
    TComQueue RxQueue();
    TComQueue TxQueue();
    signed long Init(signed long iSpeed, unsigned short iFlags);
    void InitComEx(signed char iComPort, unsigned char xBufferRx, signed long iRxSize, unsigned char xBufferTx, signed long iTxSize);
    signed long ReadLN(String line);
    signed long ReadB(void buff, signed long iSize);
    signed long WriteStr(String line);
    signed long WriteB(void buff, signed long iSize);
    signed long CheckAndClearEvent(signed long iEvCode);
    signed long GetInfo();
    signed long ClearBuffer();
    signed long SetSuspend(signed long iStatus);
    signed long SetRxTimeout(unsigned short iTimeout);
    void WriteStrNum(String cMsg, signed long iNum);
};
signed long RequestAndWaitVar_tmp;
struct TCanMessage: object  {
    unsigned short SrcNode;
    unsigned short DestNode;
    unsigned short Index;
    unsigned char SubIndex;
    signed long Value;
    void set(TCanMessage b);
};
struct TCANFrame  {
    signed long CobID;
    unsigned char Sz;
    unsigned char Data[8];
};
struct TCANopen: TCom  {
    TCom super;
    unsigned short NodeID;
    void InitCanObject();
    signed long CurrSpeed();
    signed short GetUITarget();
    signed long RequestAndWaitVar(unsigned short iNodeID, unsigned short iIndex, unsigned char iSubIndex, signed long iDefault, signed long Timeout);
    signed long RequestAndWaitVarSz(unsigned short iNodeID, unsigned short iIndex, unsigned char iSubIndex, signed char iSize, signed long iDefault, signed long Timeout);
    signed long SetExportTable(void ExportTbl, void ModbusObjectDictionary);
    signed long SendVar(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Value, signed long iSize);
    void SendVarAndWait(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Value);
    signed long SendMessage(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Value, signed long iSize);
    signed long RequestVar(unsigned short iNodeID, unsigned short iIndex, unsigned char iSubIndex, signed long DestVar, signed long iSize);
    signed long SendVarConfirmed(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Value, signed long iSize);
    signed long Run(signed long MaxCanMsgToProcess);
    signed long coReqOrWrite(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Value, signed long iMaxSize, unsigned char iDir, unsigned char iConfirm);
    signed long coPopConfirmQueue(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long Result);
    signed long SendFile(unsigned short DestNode, unsigned short Index, unsigned char SubIndex, signed long FileID);
    signed long coReqOrWriteMB(unsigned short DestNode, unsigned char MB2CANBaseIndex, unsigned short Index, signed long Value, signed long iMaxSize, unsigned char iDir, unsigned char iConfirm);
    signed long SendMBVar(unsigned short DestNode, unsigned short Index, signed long Value);
    signed long RequestAndWaitMBVar(unsigned short iNodeID, unsigned short iIndex, signed long iDefault);
    signed long RequestMBVar(unsigned short iNodeID, unsigned short iIndex, signed long DestVar);
    signed long SendFrame(TCANFrame msg);
    signed long ReadFrame(TCANFrame msg);
    void SetNetworkSpeed(signed long iNewSpeed);
    void SetRemoteNodeID(signed long iNewNodeID, unsigned short iTargetNodeID);
    ;
    signed long SendMBVarF(unsigned short DestNode, unsigned short Index, float Value);
    float RequestAndWaitMBVarF(unsigned short iNodeID, unsigned short iIndex, float iDefault);
    signed long IsNodeActive(signed long iNode);
    signed long IsNodeActiveN(signed long iNode);
    signed long IsNodeIDAlreadyInUse();
};
struct TCan: TCANopen  {
    TCANopen super;
    TCanMessage msg;
    signed long CanOpenError;
    signed char WriteOnBroadcast;
    signed long Run(signed long MaxCanMsgToProcess);
    signed long WriteReq(void ModbusTable, unsigned short iModbusAddress, unsigned short iCount, unsigned char RxPtr);
    signed long SendFrameExt(signed long CobID, unsigned char FrameType, unsigned char Length, void obj);
    signed char SendSDO(signed long CobID, unsigned char Flags, unsigned short Index, unsigned char SubIndex, signed long Value);
    signed long ReadFrameEx(TCANFrame frame, TCanMessage msg);
    signed long ReadMessage(TCanMessage msg);
};
struct TE2p: object  {
    signed char e2pfn(signed char Fn, signed long iAddr, unsigned char iVal, signed long iSize);
    signed long Save(signed long iAddr, void a, signed long iSize);
    signed long Load(signed long iAddr, void a, signed long iSize);
    void ClearAllEEprom(unsigned char iDefault);
};
struct TIO: object  {
    signed long LastError;
    bit DOStatus[21];
    signed char AIType[17];
    signed char AOType[7];
    unsigned short AOStatus[7];
    bit LedStatus[8];
    void Init();
    void Run();
    signed long GetIO(signed char iType, signed char iIndex, signed char iTransform);
    signed long SetIO(signed char iFn, signed char iIndex, signed char iType, signed long iValue, signed long iAdv);
    signed long GetDI(signed char iIndex);
    signed long GetNDI(signed char iIndex);
    signed long GetDO(signed char iIndex);
    signed long SetDO(signed char iIndex, signed long iValue);
    signed long SetLed(signed char iIndex, signed long iValue);
    signed long GetLed(signed char iIndex);
    signed long SetBuzzer(signed long iOn);
    signed long GetBuzzer();
    signed long GetAI(signed char iIndex);
    signed long SetAO(signed char iIndex, signed long iValue);
    signed long SetAIType(signed char iIndex, signed char iType, signed long iParam);
    signed long GetAIType(signed char iIndex);
    signed long SetAOType(signed char iIndex, signed char iType, signed long iParam, signed long iAdv);
    signed long GetAOType(signed char iIndex);
    signed long GetAO(signed char iIndex);
    signed long SetDIType(signed char iIndex, signed char iType, signed long iParam);
    signed long GetRawAI(signed char iIndex);
    signed long SetRawAO(signed char iIndex, signed long iValue);
    signed long GetRawAO(signed char iIndex);
    void Clear();
};
struct TFilteredAI: TIO  {
    TIO super;
    signed long AIFilter;
    signed long AIBuffer[16];
    signed char AIFilterOverflow[16];
    void Init();
    void SetAIFilter(signed long iFilter);
    signed long GetFilteredAI(signed char iIndex);
    signed long GetFilteredAIEx(signed char iIndex, signed long iFilter);
    signed long GetCurrAI(signed char iIndex);
    signed long SetAIType(signed char iIndex, signed char iType, signed long iParam);
    signed long SetAOType(signed char iIndex, signed char iType, signed long iParam, signed long iAdv);
};
struct TFilteredIO: TFilteredAI  {
    TFilteredAI super;
    bit ReverseDI[22];
    bit DisableOUT;
    signed long GetDI(signed char iIndex);
    void SetDIPolarity(signed char iIndex, signed char iCloseValue);
    signed long GetDIPolarity(signed char iIndex);
    signed long SetDO(signed char iIndex, signed long iValue);
    signed long SetAO(signed char iIndex, signed long iValue);
};
signed short StdInConv[8];
struct TConvTableItem  {
    signed long Rad;
    signed short m;
    signed short q;
};
struct TConvTable  {
    TConvTableItem ConvTable[18];
};
TConvTable CNTCConvTable;
signed long TranslateVal(signed long nVal, TConvTable xConvTable);
;
void SetBuzzerVolume(signed long iVolume);
void SetBuzzer(signed long iOn, signed long iOnTime);
signed long GetBuzzer();
signed long isLocalApp();
Array  {
    signed char ArrayOf;
} ytab[2];
struct TDateTime: TTimerSec  {
    TTimerSec super;
    signed char Seconds;
    signed char Minutes;
    signed char Hours;
    signed char Day;
    signed char Month;
    signed short Year;
    signed char WDay();
    void ExplodeTime();
    void Explode();
    void Implode();
    signed long GetRTC();
    void SetRTC(signed long iTime);
    signed char LoadRTC();
    void SaveRTC();
    void AddFormatDate(String s, String format);
    signed long DayOfYear();
    signed long isLeapYear();
};
signed long DateSerial(signed short iYear, signed char iMonth, signed char iDay, signed char iHours, signed char iMinutes, signed char iSeconds);
struct TRTCEmulator: TDateTime  {
    TDateTime super;
    signed long TimeOffset;
    unsigned short CurrDay;
    TTimerSec tmr;
    signed char RTCError();
    signed char LoadRTC();
    void SaveRTC();
    void SetTime(signed long iSec);
    void Explode();
    void UpdateRTC();
};
signed long Saturation(signed long nVal, signed long nMin, signed long nMax);
signed long LimitRange(signed long nVal, signed long nMin, signed long nMax);
signed long AddFromStringTable(String str, signed long iIndex);
signed long LoadFromStringTable(String str, signed long iIndex);
String GetStringFromStringTable(String iString);
signed long CreateImage(String cName);
unsigned short GetRemoteBiosVer(unsigned short iNodeID);
void DisplayDeviceInfoOnCom(TCom com);
unsigned char Com1BufferR[128];
unsigned char Com1BufferW[128];
unsigned char CanBufferR[128];
unsigned char CanBufferW[128];
bit RunningIntoSimulation;
TE2p e2p;
;
struct TStdParams: object  {
    unsigned short VendorID;
    unsigned short AppID;
    unsigned short VersionID;
    signed long VerifyParams();
    void ValidateParams();
    signed long InitParams();
    void LoadDefaultParams();
};
struct TStdParamsCompile: object  {
    signed long ParVersion;
    signed long VerifyParams();
    void ValidateParams();
    signed long InitParams();
    void LoadDefaultParams();
};
struct TStdAlgo: object  {
};
TMyAlgo Algo;
void Main();
struct TMyAlgo  {
    void Init();
    void MainLoop();
};
void nvmlib_Startup();
struct TModbus: TCom  {
    TCom super;
    unsigned char Ident;
    unsigned short Timeout;
    unsigned short FnCode;
    unsigned short StartAddress;
    unsigned short Count;
    unsigned char ReceivedPacket;
    bit IllegalFunctionError;
    bit IllegalDataAddress;
    bit IllegalDataValue;
    bit OutputBufferOverflow;
    bit CRCError;
    void CheckPacket();
    void ProcessPacket();
    void Run();
    signed short Value();
    void StartAnswer();
    void EndAnswer();
    void SetExceptionCode(signed long iCode);
    void WriteValue(signed long iValue, signed long iLen);
    signed long AnswerReq(void ModbusTable, unsigned short iModbusAddress, unsigned short iCount, signed long RxPtr);
    signed long WriteReq(void ModbusTable, unsigned short iModbusAddress, unsigned short iCount, unsigned char RxPtr);
    unsigned short CRCModbus(void a, signed long iSize);
    signed long Init(signed long iSpeed, unsigned short iFlags);
};
TCANopen Can;
TModbus Com1;
TFilteredIO IO;
void Algo_Init();
void Algo_MainLoop();
struct SchedulePoint  {
    signed long point;
    void WritePoint(unsigned char time, unsigned char day, unsigned char on, unsigned char schedule);
    signed short ReadTime();
    signed short ReadDay();
    signed short ReadAction();
    signed short ReadScheduleNo();
    signed short CheckDay(signed char cday);
};
signed long menu_CheckIsAvailableParam(signed long iCondition);
TParamsField ParamField[39];
TMask MaskParams[16];
TUnit UnitTab[12];
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
struct TParamsField  {
    unsigned short VarPtr;
    String Code;
    String Descr;
    signed short Min;
    signed short Max;
    signed short Default;
    unsigned char MUnit;
    bit Dec1;
    bit Dec2;
    bit RW;
    bit VMin;
    bit VMax;
    bit Mask;
    unsigned char Level;
    signed char Visibility;
    signed char Dec();
};
struct TMask  {
    String Mask;
};
struct TUnit  {
    String Unit;
};
struct TMenuGroups  {
    String Code;
    String Descr;
    unsigned char AccessLevel;
    signed long ActiveCode;
    unsigned char Start;
    unsigned char Stop;
};
struct TUserInterface  {
    signed long CurrFormID;
    bit NewForm;
    TTimerSec tmrInactive;
    unsigned short InactivityTimeout;
    signed long FormHistory[8];
    signed char FormHistoryUsed;
    void Init();
    void Run();
    void ShowForm(signed long iNewForm);
    void ShowMainFormAndResetHistory();
    void ShowFormAndKeepHistory(signed long iNewForm);
    void PrevForm();
};
struct TMenuInterface: TUserInterface  {
    TUserInterface super;
    signed short CacheArray[32];
    signed char CacheArrayUsed;
    signed short ActiveItem;
    signed char StartItem;
    signed char MenuHistory[8];
    unsigned char AccessLevel;
    void DrawMenu(signed short iRoot, signed short iStart, signed short iEnd);
    void ShowMenu(signed long iMenuID);
    signed char isMenuAvailable(signed long iIndex);
};
struct TParamForm  {
    signed short ActiveItem;
    bit RedrawScreen;
    bit EditMode;
    void DrawParam(signed short iStart, signed short iEnd);
    signed long ScanAvailableItem(signed char iMoveDir, signed short iStart, signed short iEnd);
};
void CheckBiosVer(signed long ReqBiosDate);
struct TCANVarValMng  {
    void Init();
    signed long UITargetID();
    signed long Get(signed long Index);
    signed long Set(signed long Index, signed long Value);
};
struct TCANVarValMng_v2  {
    signed char UITargetID;
    void Init();
    void SetUITarget(signed long iNode);
    signed long GetUITarget();
    signed long Get(signed long Index);
    signed long Set(signed long Index, signed long Value);
    float GetF(signed long Index);
    void SetF(signed long Index, float Value);
};
struct TCANVarValMngMB  {
    signed char UITargetID;
    void Init();
    void SetUITarget(signed long iNode);
    signed long GetUITarget();
    signed long Get(signed long Index);
    signed long Set(signed long Index, signed long Value);
    float GetF(signed long Index);
    void SetF(signed long Index, float Value);
};
struct TMaxLoopForm  {
    signed long LastLoopTime;
    TTimer tmrLoop;
    signed long MaxLoopTime;
    void Init();
    void Run();
    void Reset();
    void UpdateTimer();
    void StartTimer();
    void StopTimer();
};
struct TSimpleUI  {
    unsigned char CurrFormID;
    bit NewForm;
    void Init();
    void Run();
    void ShowForm(signed long iNewForm);
    void PrevForm();
};
void DrawFormSwVer();
signed long SelectMenuList(signed char iRow, signed char iNumRows, signed long TotalItems, signed long ActiveItem);
TAlarmConfig AlarmsConfig[10];
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
struct TAlarmConfig  {
    String Code;
    unsigned char ResetID;
    unsigned char ResetTime;
    unsigned short StartupDelayID;
    unsigned short DelayID;
    bit StandbyActive;
    bit SetAlarmR;
    bit SetWarningR;
    bit VReset;
    bit VStartupDelay;
    bit VDelay;
    signed char ComprStatus;
    signed char PumpStatus;
    signed char FanStatus;
    signed char HeaterStatus;
    String Descr;
    signed long Reset();
    signed long StartupDelay();
    signed long Delay();
};
struct TAlarmStatus  {
    signed char AlarmActive;
    signed char AutoReset;
    TTimerSec AlarmStart;
    TTimerSec Alarm1stStart;
};
struct TAlarmsManager  {
    TAlarmStatus AlarmsStatus[10];
    bit PackedAlarmsStatus[32];
    bit BuzzerReq;
    bit AlarmR;
    bit WarningR;
    TTimerSec AlarmRTimer;
    TTimerSec BuzzerTimer;
    unsigned short ActiveAlarms;
    unsigned short ActiveWarnings;
    unsigned short NackAlarms;
    void Init();
    void Mute();
    void ResetAlarms(signed long iOnlyInactiveAlarms);
    void ClearAlarm(signed long iIndex);
    void SetAlarmCondition(signed long iIndex, signed long iCondition, signed char iDevActive, signed long iStartElapsedTime);
    signed long isAlarm(signed long iIndex);
    signed long isNackAlarm(signed long iIndex);
    void Run();
};
void alr_HandleAlarmChange(signed long iIndex, signed long iStatus);
signed long DIValue;
signed long DOValue;
signed short AIValue[16];
signed short AOValue[6];
;
;
;
;
struct TIOValue  {
    signed long Run();
    void RunLed();
};
struct TEventHistory  {
    signed long TimeOffset;
    unsigned char NextWrite;
    void Init(TDateTime rtc);
    void ClearHistory();
    void Run(TDateTime rtc);
    signed long NormalizeIndex(signed long iIndex);
    void EventStarted(signed long iID);
    void EventEnded(signed long iID);
    void WriteEvent(signed long iID, signed long iData);
    signed long GetEventDuration(TEventHistoryItem event);
    signed long SearchEventStart(signed long iID);
};
struct TEventHistoryItem  {
    signed short EventID;
    signed long StartEvent;
    signed long EndEvent;
    signed long isActive();
};
TEventHistory EventHistoryLog;
signed long EventHistoryLog_Signature;
signed short EventHistoryLog_EventID[20];
signed long EventHistoryLog_StartEvent[20];
signed long EventHistoryLog_EndEvent[20];
unsigned char EventHistoryLog_NextWrite;
;
;
;
;
;
signed short EventHistoryLog_AddEvent;
signed long EventHistoryLog_AddEventData;
;
;
void DrawFormEventHistoryLog();
signed long TEventHistory_GetUserEventDescr(signed long iID, String cod, String txt);
bit UIResetHistory;
;
struct T7dScheduledAction  {
    unsigned char WeekDays;
    unsigned char Time;
    unsigned char Action;
    unsigned short DayOfMonth;
    signed long Pack();
    void Unpack(signed long iPacked);
    void SetSchedule(signed char iHour, signed char iMin, signed char iMonth, signed char iDay, signed char iWeekDays, unsigned char iAction);
    void Clear();
    signed long isActive(TDateTime d);
    signed long SplitDayOfMonthUI(signed long iDayOfMonth);
    void AddFormatSchedule(String str);
};
struct T7dScheduler  {
    signed long LastTimeFrame;
    signed char LastSchedule;
    signed char TriggeredIndex;
    void Init();
    signed long CheckNextAction(TDateTime d);
    void Clear();
};
void DrawFormScheduler(signed char iAllowEdit);
struct T7dScheduleUI  {
    T7dScheduledAction schedule;
    signed long EditField;
    signed long ScheduleIndex;
    void DrawForm(signed char iAllowEdit, signed long Min, signed long Max);
    void DrawForm7dScheduledAction();
};
void DrawFormSchedulerTest(TDateTime StartDate);
;
signed long ScheduledAction[15];
T7dScheduler Scheduler;
void DrawFormRTC(signed char iAllowEdit);
signed short FormRTC_Limits[12];
String FormRTC_WeekDays[7];
;
signed long GetRemoteRTC();
TDateTime RTC;
signed long RTC_NewTime;
;
;
void RTC_Run();
struct TRemoteRTC: TRTCEmulator  {
    TRTCEmulator super;
    TTimerSec LastUpdate;
    void Init();
    void RemoteUpdate();
};
signed long ParVersion;
signed short ParamVal[40];
bit UIParamsChanged;
signed short LastNodeID;
;
;
;
;
;
void InitializeParamVal();
void IOManager_Init();
void IOManager_Run();
TAlarmsManager AlarmsManager;
signed char UIAlarmNotification;
signed char UIAlarmReset;
signed long UIActiveAlarms[4];
;
;
void Alarms_Init();
void Alarms_Run();
void SetOrResetAlarmCondition(signed long iIndex, signed long iSetCondition, signed long iResetCondition, signed char iDevActive, signed long iStartElapsedTime);
void AlgoLib_Init();
void AlgoLib_Run();
struct float: object  {
    signed long lval;
    void set(float n);
    float sum(float n);
    float mul(float n);
    float sub(float n);
    float div(float n);
    float neg();
    signed long NotEqual(float n);
    signed long Equal(float n);
    signed long LessThan(float n);
    signed long LessOrEqual(float n);
    signed long GreaterOrEqual(float n);
    signed long GreaterThan(float n);
};
float IntegerToFloat(float Val, signed long Exp);
signed long FloatToIntegerTrunc(float Val);
signed long FloatToIntegerRound(float Val);
float logf(float Val);
float expf(float Val);
float fabsf(float x);
float powf(float x, float y);
float powf_i(float x, signed long y);
float log10f(float Val);
float sqrtf(float x);
float fmodf(float x, float y);
float hypotf(float x, float y);
float floorf(float x);
float ceilf(float x);
void SplitFloat(float f, signed long Val, signed char Exp, signed long ReqDecimals);
void AddFormatNumFloat(String s, float n, signed char lpad, signed char iDec, signed char sgn);
signed long FloatPack(float n);
float FloatUnpack(signed long n);
float minf(float V1, float V2);
float maxf(float V1, float V2);
float Limitf(float nMin, float nVal, float nMax);
float cosf(float x);
float sinf(float x);
float sinhf(float x);
struct p1  {
    float p1a;
    float p1b;
};
signed short TestFloat();
struct nvm_thread_function_prototype  {
    signed long fnaddr;
    signed long ReqStack;
};
signed long nvm_thread_create(nvm_thread_function_prototype fnThreadFn, signed long iParam);
struct nvm_thread_method_prototype  {
    signed long fnaddr;
    signed long ReqStack;
    signed long Subject;
};
signed long nvm_thread_createM(nvm_thread_method_prototype fnThreadFn);
struct TMutex  {
    signed char LockStatus;
    signed long Lock(signed long iWaitms);
    signed long Unlock();
};
signed long SetEvent(signed long EventMask);
signed long CheckEvent(signed long EventMask);
signed long CheckAndClearEvent(signed long EventMask);
signed long sysSetEvent(signed long EventMask);
struct TModbusMaster: TCom  {
    TCom super;
    unsigned short Timeout;
    signed char Status;
    TTimer TTimeout;
    signed long Init(signed long iSpeed, unsigned short iFlags);
    void Run();
    unsigned short CRCModbus(void a, signed long iSize);
    void StartRequest(unsigned char SlaveAddress, unsigned short FunctionCode);
    void AddToRequest(signed long iValue, signed long iLen);
    void EndRequest();
    void ReadRequest(unsigned char Ident, unsigned char FunctionCode, unsigned short StartAddress, unsigned short QuantityObject);
    void WriteRequest(unsigned char Ident, unsigned char FunctionCode, unsigned short StartAddress, unsigned short Value);
    signed short ReadAnswerCoil(signed long Index);
    signed short ReadAnswerVarShort(signed long Index);
    unsigned short ReadAnswerVar(signed long Index);
    signed short ReadRequestAndWait(unsigned char Ident, unsigned short StartAddress, signed short Count, signed short Def);
    void WriteRequestAndWait(unsigned char Ident, unsigned short StartAddress, unsigned short Value);
};
void DrawFormModbusMaster();
TDIDefault DIDefault[22];
TDODefault DODefault[20];
TAIDefault AIDefault[16];
TAODefault AODefault[6];
struct TStaticIOManager  {
    TTimerSec ReconfiguredIOTimer;
    unsigned char EnableOUT;
    unsigned char ResetConfigReq;
    void Init();
    void LoadDefault();
    void ResetValues();
    void ResetConfig();
    void Run();
    signed char FindFunctionDO(signed long iFn, signed char iPolarity);
};
TDIManager DIMng;
TDOManager DOMng;
TAIManager AIMng;
TAOManager AOMng;
bit VDIValue[9];
bit VDOValue[18];
signed short VAIValue[6];
signed short VAOValue[1];
struct TDIDefault  {
    unsigned char VDIPolarity;
    unsigned char IndexVDI;
};
struct TDIManager  {
    signed long Polarity;
    void Init();
    void LoadDIDefault();
    void ResetVDI();
    void Run();
};
struct TDODefault  {
    unsigned char VDOPolarity;
    unsigned char IndexVDO;
};
struct TDOManager  {
    signed long Polarity;
    void Init();
    void LoadDODefault();
    void ResetVDO();
    void Run(unsigned char EnableOUT);
    signed char FindFunctionIO(signed long iFn, signed char iPolarity);
};
struct TAIDefault  {
    unsigned char IndexAIType;
    unsigned char IndexVAI;
    signed short IndexVAIMIN;
    signed short IndexVAIMAX;
    signed short PercentVAI;
    unsigned char ErrorOnVAI;
};
signed char AIUserType2IOType[9];
struct TAIManager  {
    void Init();
    void LoadAIDefault();
    void ResetVAI();
    void Run();
};
struct TAODefault  {
    unsigned char IndexAOType;
    unsigned char IndexVAO;
};
signed char AOUserType2IOType[8];
struct TAOManager  {
    void Init();
    void LoadAODefault();
    void ResetVAO();
    void Run(unsigned char EnableOUT);
};
void SplitPowOnOuptut(signed long iDOStartIndex, signed long iMaxOutput, signed long ReqPow);
signed long LinearProp(signed long x, signed long min, signed long max);
signed long PropOutput(signed long CurrentValue, signed long Setp, signed long Diff);
signed long Compensate(signed long Text, signed long TStart, signed long TEnd, signed long CompensMax);
struct TSetpoint  {
    signed long Setp;
    signed short Diff;
    signed long RequiredPower(signed long CurrentValue);
};
struct TSetpointN: TSetpoint  {
    TSetpoint super;
    signed short Neutral;
    void Clear();
    signed long RequiredPower(signed long CurrentValue);
};
struct TSetpointPI: TSetpointN  {
    TSetpointN super;
    signed long TIntegr;
    signed long IerrAcc;
    TTimerSec ErrorTime;
    void Clear();
    signed long RequiredPowerPI(signed long CurrentValue);
    signed long GetIerr();
};
struct TSetpointDZ: TSetpointPI  {
    TSetpointPI super;
    signed short DiffOff;
    signed long MinOnDelay;
    signed long MaxOnDelay;
    signed long MinOffDelay;
    signed long MaxOffDelay;
    signed char NStages;
    signed char Zone;
    signed char StageOn;
    void Clear();
    signed long RequiredPowerDZ(signed long CurrentValue);
};
struct TToggle  {
    bit CurrStatus;
    signed long SetStatus(signed long i);
    signed long GetStatus();
};
struct TToggleTimer: TToggle  {
    TToggle super;
    TTimerSec tmr;
    void Init();
    signed long SetStatus(signed long i);
    signed long ElapsedSec();
    signed long ElapsedONSec();
    signed long ElapsedOFFSec();
};
signed long CalcStageOn(signed long ReqPow, signed long StageOn, signed long NStages, signed char RoundCalc);
struct TStageControl  {
    signed char NStages;
    signed char StageOn;
    void SetStageOn(signed long ReqPow);
    signed long SetStagesToDO(signed long iStartDO);
    signed long CurrentOutputPower();
};
struct TStageControlWithDisabled: TStageControl  {
    TStageControl super;
    bit Disabled[8];
    signed long SetStagesToDO(signed long iStartDO);
    signed long CurrentOutputPower();
};
struct TSimpleInverter  {
    signed long VMin;
    signed long VMax;
    signed long TMinOn;
    signed long TSpike;
    bit WaitingOff;
    signed long Out;
    TTimerSec LastTurnOnTime;
    signed long isOn();
    void ProducePower(signed long ReqPow);
};
struct TInverter  {
    signed long VMin;
    signed long VMax;
    signed long TMinOn;
    signed long TSpike;
    signed long Setp;
    signed long Diff;
    signed long CutOffDiff;
    signed long CutOffHyst;
    TTimerSec LastTurnOnTime;
    signed long Out;
    signed long Status;
    signed long isOn();
    void ProducePowerTemp(signed long Temp);
    void ProducePower(signed long ReqPow);
};
struct TFanManager: TStageControlWithDisabled  {
    TStageControlWithDisabled super;
    signed char Mode;
    signed long ProducePower(signed long ReqPow, signed long ComprOn);
};
struct TCompressor  {
    bit Disabled;
    bit WaitingPump;
    bit WaitingTmin2on;
    bit WaitingTmin2off;
    bit WaitingTminOFF;
    bit WaitingTminON;
    bit WaitingTmin2onC;
    bit WaitingTDelayP;
    bit OvldAlarm;
    signed char Status;
    signed long WorkingSeconds;
    signed long TempWorkingSec;
    TTimerSec LastOn;
    TTimerSec LastOnP;
    TTimerSec LastOff;
    signed long WaitingOn();
    signed long WaitingOff();
    signed long WorkingHours();
    void ClearWaitingFlags();
    signed long isOn();
};
struct TComprMngParams  {
    signed char NComp;
    signed char NPar;
    signed char OnMode;
    signed char OffMode;
    signed char CStartMode;
    signed char PWSDelay;
    signed char Rotation;
    bit SmartPow;
    signed short Tmin2on;
    signed short Tmin2off;
    signed short TminOFF;
    signed short TminON;
    signed long TmaxDH;
    signed short Tmin2onC;
    signed short TDelayP;
};
struct TComprManager: TStageControl  {
    TStageControl super;
    TComprMngParams CnfParams;
    signed long Out;
    signed char NextComp;
    bit WaitingPump;
    TCompressor Comp[8];
    signed char ChangePar;
    TTimerSec LastComprTurnOn;
    TTimerSec LastComprTurnOff;
    void CompProducePower(TCompressor Comp, signed long MaxPar);
    void TurnOffDisabledCompr();
    void TurnOffCompr(TCompressor Comp);
    void TurnOffAllCompr();
    void DistributePowToOnCompressors();
    signed long WaitingOn();
    void CompOnCpppCppp();
    void CompOnCCp1p2p3p1p2p3();
    void CompOnCCp1p1p2p2p3p3();
    void CompOffpppCpppC();
    void CompOffppppppCC();
    signed long GetNextOnComp(signed long CurrComp);
    signed long GetNextOffComp(signed long CurrComp);
    void UpdateProduction(signed long ReqPow, signed char RoundCalc);
    void ProducePower(signed long ReqPow, signed char RoundCalc);
    signed long SetComprToDO(signed long iStartDO, signed long iParNC);
};
struct TPump: TCompressor  {
    TCompressor super;
    THourCounter WorkingTime;
};
struct TEvapPump  {
    signed char NStages;
    signed char Mode;
    signed char Rot;
    signed short TOff;
    signed short TOnComp;
    signed char Rotation;
    signed short TPulseOff;
    signed short TPulseOn;
    signed long HourLimitRot;
    signed char FlowAlarmCnt;
    signed long Out;
    bit sw;
    bit burst;
    TTimerSec FirstPumpTurnOn;
    TTimerSec LastPumpTurnOn;
    TTimerSec LastPumpTurnOff;
    TPump Pumps[2];
    signed char StageOn;
    signed char CurrPump;
    bit WaitingOff;
    signed char isOn();
    signed long isOnPump(signed long iIndex);
    signed long AllowComp();
    void SwitchPump();
    void TurnOff();
    void ProducePowerPump(signed long ReqPow, signed long SysOn, signed long ComprOn);
};
struct TTwinPump  {
    signed char NStages;
    signed char Mode;
    signed char Rot;
    signed short TOff;
    signed short TOnComp;
    signed char Rotation;
    signed short TPulseOff;
    signed short TPulseOn;
    signed long HourLimitRot;
    signed char FlowAlarmCnt;
    bit burst;
    TTimerSec FirstPumpTurnOn;
    TTimerSec LastPumpTurnOn;
    TTimerSec LastPumpTurnOff;
    TPump Pumps[2];
    signed char StageOn;
    signed char CurrPump;
    bit WaitingOff;
    signed char isOn();
    signed long isOnPump(signed long iIndex);
    signed long AllowComp();
    void SwitchPump();
    void TurnOff(signed char Abort);
    void ProducePowerPump(signed char ReqPow, signed char SysOn, signed long LastComprTurnedOff);
};
struct THourCounter  {
    signed long Sec;
    TTimerSec LastCheck;
    void Load(signed long CurrWorkingSec);
    void Reset();
    signed long WorkingHours();
    void SetStatus(signed long iOn);
};
signed long TranslateDegCtoDegF(signed long iDegC, signed char iRelative);
signed long TranslateDegFtoDegC(signed long iDegF, signed char iRelative);
signed long TranslateBarToPsi(signed long iBar);
signed long TranslatePsiToBar(signed long iPsi);
struct TRampOut  {
    signed short Out;
    TTimer t;
    void Init();
    void Run();
    signed long GetOutPow(signed long iPow, signed short iVarTime, signed short iVarMax);
};
struct TRampOutWithParams: TRampOut  {
    TRampOut super;
    signed short ReqPow;
    signed short VarMax;
    signed short VarTime;
    void SetOutPow(signed long iPow);
    void SetMaxVar(signed short iVarTime, signed short iVarMax);
    void Run();
};
;
TStaticIOManager IOManager;
bit GlobalOn;
TToggleTimer SysOn;
float NTC_Temp_CO;
float NTC_Temp_Zewn;
float NTC_Temp_CWU;
float NTC_Temp_Glik;
TModbusMaster Com2;
unsigned char Com2BufferRx[128];
unsigned char Com2BufferTx[128];
unsigned char SlaveID;
signed short bTaryfaON;
signed short bPcwuON;
signed short bPasteryzuj;
signed short bAL_CzP;
signed short bHP1_isOn;
signed short bHP2_isOn;
signed short bHP3_isOn;
signed short Hist_od_CWU;
signed short Hist_od_CO;
signed short bCwuON;
signed short bCoON;
signed short iHPselected;
signed short bFirstRun;
signed short ActiveSchedules;
signed short Moc_inwertera;
TTimerSec PG1Wait;
TTimerSec Comp_Min_On[3];
TTimerSec Comp_Min_Off[3];
TTimerSec SaveWH;
TStoppableTimerSec PasterizationTime;
TTimerSec CheckLongSchedule;
TStoppableTimerSec PasterizationTimeOut;
THourCounter WHCounters[10];
signed long CounterValue[10];
SchedulePoint mainSchedulesPoints[100];
;
;
;
signed short CheckSchedule();
signed short EraseSchedules();
float lastU;
TTimer SampleTime;
float Y;
float RealBuildingTemperature();
float BuildingTemperature();
float COTemperature();
void HP1_Turn(signed short bOnOff, signed short bCoCwu);
signed short HP2_Turn(signed short bOnOff);
signed short HP3_Turn(signed short bOnOff, signed short bCoCwu);
void App_Init();
void App_Run();

//#endif
